#  Example  1 - Commercial Corporate Organization
organization = {
  aws_service_access_principals = [
    "access-analyzer.amazonaws.com",
    "account.amazonaws.com",
    "aws-artifact-account-sync.amazonaws.com",
    "backup.amazonaws.com",
    "cloudtrail.amazonaws.com",
    "compute-optimizer.amazonaws.com",
    "config-multiaccountsetup.amazonaws.com",
    "config.amazonaws.com",
    "fms.amazonaws.com",
    "guardduty.amazonaws.com",
    "member.org.stacksets.cloudformation.amazonaws.com",
    "ram.amazonaws.com",
    "reporting.trustedadvisor.amazonaws.com",
    "securityhub.amazonaws.com",
    "servicecatalog.amazonaws.com",
    "ssm.amazonaws.com",
    "sso.amazonaws.com",
    "tagpolicies.tag.amazonaws.com"
  ]
  enabled_policy_types = [
    "SERVICE_CONTROL_POLICY",
    "BACKUP_POLICY",
    "TAG_POLICY"
  ]

  organizational_units = {
     "Root" = {
      policies = [
        "organizations_restrict",
        "restrict_lambda_vpc_use"
      ]
      "Exceptions" = {
        "ExceptionAccounts" = {}
      }
      "Infrastructure" = {
        policies = [
          "restrict_regions",
          "restrict_root",
          "security_services_baseline"
        ]
        "Backup" = {
          "MEA" = {}
        }
        "NetworkProd" = {
          policies = [
            "network_account"
          ]
          "ca-central-1" = {}
          "MEA"          = {}
        }
        "NetworkTest" = {
          policies = [
            "network_account"
          ]
        }
        "SharedServicesProd" = {}
        "SharedServicesTest" = {}
      }
      "PolicyStaging" = {
        "Infrastructure" = {
          policies = [
            "network_account"
          ]
        }
        "Sandbox" = {
          policies = [
            "restrict_regions",
            "restrict_root",
            "security_services_baseline"
          ]
        }
        "Security" = {
          policies = [
            "restrict_regions",
            "restrict_root",
            "security_services_baseline"
          ]
        }
        "Workload" = {
          policies = [
            "restrict_regions",
            "restrict_root",
            "security_services_baseline"
          ]
        }
      }
      "Sandbox" = {
        policies = [
          "restrict_regions",
          "restrict_root",
          "security_services_baseline"
        ]
        "Demo" = {}
        "Dev"  = {}
      }
      "Security" = {
        policies = [
          "restrict_regions",
          "restrict_root",
          "security_services_baseline"
        ]
        "Prod" = {
          "MEA" = {}
        }
        "Test" = {}
      }
      "ServiceCatalog" = {
        "Prod" = {}
        "Test" = {}
      }
      "Suspended" = {
      }
      "Workload" = {
        policies = [
          "restrict_regions",
          "restrict_root",
          "security_services_baseline"
        ]
        "Prod" = {
          "ca-central-1" = {}
          "MEA"          = {}
        }
        "SDLC" = {
          "MEA" = {}
        }
      }
    }
  }
  
  organization_policies = {
    "backup_account" = {
      description = "This SCP blocks unnecessary services that are not used in the Backup accounts."
    }
    "logging_account" = {
      description = "This SCP blocks unnecessary services that are not used in the centralized Logging accounts"
    }
    "network_account" = {
      description = "This SCP blocks unnecessary services that are not used in the centralized Network accounts - needed services include Transit Gateways, VPN Tunnels, Palo Altos, Cisco SD-WAN, Direct Connect, Global Accelerator, NLB/ALB, CloudFront."
    }
    "organizations_restrict" = {
      description = "-"
    }
    "restrict_lambda_vpc_use" = {
      description = "Do not let the use of Lambda Shared VPC unless by automation"
    }
    "restrict_regions" = {
      description = "-"
    }
    "restrict_root" = {
      description = "-"
    }
    "security_services_baseline" = {
      description = "-"
    }
    "suspend_account" = {
      description = "This SCP blocks all access other than to the Billing and Cost Explorer consoles."
    }
  }
}

# Example 2 - Organization with feature_set set to "CONSOLIDATED_BILLING"
organization = {
  aws_service_access_principals = [
    "access-analyzer.amazonaws.com",
    "account.amazonaws.com",
    "aws-artifact-account-sync.amazonaws.com",
    "backup.amazonaws.com",
    "cloudtrail.amazonaws.com",
    "compute-optimizer.amazonaws.com",
    "config-multiaccountsetup.amazonaws.com",
    "config.amazonaws.com",
    "fms.amazonaws.com",
    "guardduty.amazonaws.com",
    "member.org.stacksets.cloudformation.amazonaws.com",
    "ram.amazonaws.com",
    "reporting.trustedadvisor.amazonaws.com",
    "securityhub.amazonaws.com",
    "servicecatalog.amazonaws.com",
    "ssm.amazonaws.com",
    "sso.amazonaws.com",
    "tagpolicies.tag.amazonaws.com"
  ]
  enabled_policy_types = [
    "SERVICE_CONTROL_POLICY",
    "BACKUP_POLICY",
    "TAG_POLICY"
  ]
  feature_set =  "CONSOLIDATED_BILLING"

  organizational_units = {
    "Root" = {
      policies = [
        "example_policy"
      ]
      "Infrastructure" = {
        policies = [
          "example_policy"
        ]
        "Backup" = {
          "MEA" = {}
        }
        "NetworkProd" = {
          "ca-central-1" = {}
          "MEA"          = {}
        }
        "NetworkTest"        = {}
        "SharedServicesProd" = {}
        "SharedServicesTest" = {}
      }
    }
  }

  organization_policies = {
    "example_policy" = {
      description = "example description"
      content     = <<CONTENT
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Deny",
              "Action": "organizations:LeaveOrganization",
              "Resource": "*"
            }
          ]
        }
      CONTENT
    }
  }
}
